{"version":3,"file":"index.js","sources":["../src/Peer.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport {\n\tEventEmitter,\n\ttype EventEmitter as EventEmitterTypes,\n} from \"eventemitter3\";\n\nconst defaultMaxChannelMessageSize = 16384;\n\nexport interface PeerOptions {\n\tid?: string;\n\tsdpTransform?: (sdp?: string) => string;\n\tchannelName?: string;\n\tchannelConfig?: RTCDataChannelInit;\n\tconfig?: RTCConfiguration;\n\tofferConfig?: RTCOfferOptions;\n\tanswerConfig?: RTCAnswerOptions;\n\tmaxChannelMessageSize?: number;\n\twebrtc?: PeerWebRTC;\n}\n\nexport interface PeerWebRTC {\n\tRTCPeerConnection: typeof RTCPeerConnection;\n\tRTCSessionDescription: typeof RTCSessionDescription;\n\tRTCIceCandidate: typeof RTCIceCandidate;\n}\n\nconst DEFAULT_WEBRTC: PeerWebRTC = {\n\tRTCPeerConnection:\n\t\ttypeof RTCPeerConnection === \"undefined\"\n\t\t\t? (null as never)\n\t\t\t: (RTCPeerConnection as never),\n\tRTCSessionDescription:\n\t\ttypeof RTCSessionDescription === \"undefined\"\n\t\t\t? (null as never)\n\t\t\t: (RTCSessionDescription as never),\n\tRTCIceCandidate:\n\t\ttypeof RTCIceCandidate === \"undefined\"\n\t\t\t? (null as never)\n\t\t\t: (RTCIceCandidate as never),\n};\n\ninterface PeerEvents {\n\tsignal(message: never): void;\n\tconnect(): void;\n\tdata(event: string | Blob | ArrayBuffer | Uint8Array): void;\n\terror(error: Error): void;\n\tclose(): void;\n\ttransceiver(transceiver: RTCRtpTransceiver): void;\n\ttrack(track: RTCTrackEvent): void;\n\tnegotiated(): void;\n}\n\ntype PeerEventNames = EventEmitterTypes.EventNames<PeerEvents>;\ntype PeerEventArguments = EventEmitterTypes.ArgumentMap<PeerEvents>;\ntype EventEmitterReturnType<T> = T extends []\n\t? // biome-ignore lint/suspicious/noConfusingVoidType: <explanation>\n\t\tvoid\n\t: T extends [infer R]\n\t\t? R\n\t\t: T;\n\nexport class Peer extends EventEmitter<PeerEvents> {\n\tprivate id: string;\n\tprivate initiator = false;\n\tprivate channelName: string;\n\tprivate channelConfig?: RTCDataChannelInit;\n\tprivate channel?: RTCDataChannel;\n\tprivate maxChannelMessageSize = defaultMaxChannelMessageSize;\n\tprivate sdpTransform = sdpTransform;\n\tprivate config: RTCConfiguration = { iceServers: [] };\n\tprivate connection?: RTCPeerConnection;\n\tprivate offerConfig?: RTCOfferOptions;\n\tprivate answerConfig?: RTCAnswerOptions;\n\tprivate pendingCandidates: RTCIceCandidateInit[] = [];\n\tprivate webrtc: PeerWebRTC = DEFAULT_WEBRTC;\n\n\tconstructor(options: PeerOptions) {\n\t\tsuper();\n\t\tthis.id = options.id || uuidv4();\n\t\tthis.channelName = options.channelName || uuidv4();\n\t\tif (options.channelConfig) {\n\t\t\tthis.channelConfig = options.channelConfig;\n\t\t}\n\t\tif (options.sdpTransform) {\n\t\t\tthis.sdpTransform = options.sdpTransform;\n\t\t}\n\t\tif (options.config) {\n\t\t\tthis.config = options.config;\n\t\t}\n\t\tif (options.offerConfig) {\n\t\t\tthis.offerConfig = options.offerConfig;\n\t\t}\n\t\tif (options.answerConfig) {\n\t\t\tthis.answerConfig = options.answerConfig;\n\t\t}\n\t\tif (options.maxChannelMessageSize && options.maxChannelMessageSize > 0) {\n\t\t\tthis.maxChannelMessageSize = options.maxChannelMessageSize;\n\t\t}\n\t\tif (options.webrtc) {\n\t\t\tthis.webrtc = options.webrtc;\n\t\t}\n\t}\n\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\tgetConnection() {\n\t\treturn this.connection;\n\t}\n\n\tgetChannel() {\n\t\treturn this.channel;\n\t}\n\n\tisReady() {\n\t\treturn this.channel && this.channel.readyState === \"open\";\n\t}\n\n\tisClosed() {\n\t\treturn !this.connection || this.connection.connectionState !== \"connected\";\n\t}\n\n\tready() {\n\t\tif (this.isReady()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\treturn this.waitOnce(\"connect\");\n\t}\n\n\tdata() {\n\t\treturn this.waitOnce(\"data\");\n\t}\n\n\tclosed() {\n\t\treturn this.waitOnce(\"close\");\n\t}\n\n\tisInitiator() {\n\t\treturn this.initiator;\n\t}\n\n\tinit() {\n\t\tthis.initiator = true;\n\t\treturn this.createPeer();\n\t}\n\n\tclose() {\n\t\treturn this.internalClose(true);\n\t}\n\n\tsend(chunk: string | Blob | ArrayBuffer | ArrayBufferView) {\n\t\tif (!this.channel) {\n\t\t\tthrow new Error(\"Channel not initialized\");\n\t\t}\n\t\tthis.channel.send(chunk as never);\n\t\treturn this;\n\t}\n\n\twrite(chunk: string | Blob | ArrayBuffer | ArrayBufferView) {\n\t\tif (!this.channel) {\n\t\t\tthrow new Error(\"Channel not initialized\");\n\t\t}\n\t\treturn write(this.channel, chunk, this.maxChannelMessageSize);\n\t}\n\n\twritableStream() {\n\t\tif (!this.channel) {\n\t\t\tthrow new Error(\"Channel not initialized\");\n\t\t}\n\t\treturn writableStreamFromChannel(this.channel, this.maxChannelMessageSize);\n\t}\n\n\treadableStream() {\n\t\tif (!this.channel) {\n\t\t\tthrow new Error(\"Channel not initialized\");\n\t\t}\n\t\treturn readableStreamFromChannel(this.channel);\n\t}\n\n\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\tasync signal(message: any) {\n\t\tif (!this.connection) {\n\t\t\tawait this.createPeer();\n\t\t}\n\n\t\tconsole.debug(`${this.id}: received signal message=${message.type}`);\n\t\tswitch (message.type) {\n\t\t\tcase \"renegotiate\": {\n\t\t\t\treturn this.negotiate();\n\t\t\t}\n\t\t\tcase \"transceiverRequest\": {\n\t\t\t\tif (!this.initiator) {\n\t\t\t\t\tthrow new Error(\"Invalid signal state\");\n\t\t\t\t}\n\t\t\t\tconst transceiverRequest = message.transceiverRequest;\n\t\t\t\tif (!transceiverRequest) {\n\t\t\t\t\tthrow new Error(\"Invalid signal message\");\n\t\t\t\t}\n\t\t\t\tawait this.addTransceiverFromKind(\n\t\t\t\t\ttransceiverRequest.kind,\n\t\t\t\t\ttransceiverRequest.init,\n\t\t\t\t);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tcase \"candidate\": {\n\t\t\t\tif (!this.connection) {\n\t\t\t\t\tthrow new Error(\"Connection not initialized\");\n\t\t\t\t}\n\t\t\t\tconst candidateJSON = message.candidate;\n\t\t\t\tif (!candidateJSON) {\n\t\t\t\t\tthrow new Error(\"Invalid signal message\");\n\t\t\t\t}\n\t\t\t\tconst candidate = new this.webrtc.RTCIceCandidate(candidateJSON);\n\t\t\t\tif (this.connection.remoteDescription == null) {\n\t\t\t\t\tthis.pendingCandidates.push(candidate);\n\t\t\t\t} else {\n\t\t\t\t\tawait this.connection.addIceCandidate(candidate);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tcase \"answer\":\n\t\t\tcase \"offer\":\n\t\t\tcase \"pranswer\":\n\t\t\tcase \"rollback\": {\n\t\t\t\tif (!this.connection) {\n\t\t\t\t\tthrow new Error(\"Connection not initialized\");\n\t\t\t\t}\n\t\t\t\tconst sdp = message.sdp;\n\t\t\t\tif (!sdp) {\n\t\t\t\t\tthrow new Error(\"Invalid signal message\");\n\t\t\t\t}\n\t\t\t\tconst sessionDescription = new this.webrtc.RTCSessionDescription({\n\t\t\t\t\ttype: message.type,\n\t\t\t\t\tsdp,\n\t\t\t\t});\n\t\t\t\tawait this.connection.setRemoteDescription(sessionDescription);\n\t\t\t\tfor (const candidate of this.pendingCandidates) {\n\t\t\t\t\tawait this.connection.addIceCandidate(candidate);\n\t\t\t\t}\n\t\t\t\tthis.pendingCandidates.length = 0;\n\t\t\t\tif (this.connection?.remoteDescription?.type === \"offer\") {\n\t\t\t\t\tawait this.createAnswer();\n\t\t\t\t}\n\t\t\t\tthis.emit(\"negotiated\");\n\t\t\t\tconsole.debug(`${this.id}: set remote sdp`);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconsole.debug(`${this.id}: invalid signal type: ${message}`);\n\t\t\t\tthrow new Error(\"Invalid signal message type\");\n\t\t\t}\n\t\t}\n\t}\n\n\twaitOnce<K extends PeerEventNames>(event: K) {\n\t\treturn new Promise<EventEmitterReturnType<PeerEventArguments[K]>>(\n\t\t\t(resolve) => {\n\t\t\t\tthis.once(event, (...args) => {\n\t\t\t\t\tswitch (args.length) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tresolve(undefined as never);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tresolve(args[0]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tresolve(args as never);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t);\n\t}\n\n\taddTransceiverFromKind(kind: string, init?: RTCRtpTransceiverInit) {\n\t\tif (!this.connection) {\n\t\t\tthrow new Error(\"Connection not initialized\");\n\t\t}\n\n\t\tif (this.initiator) {\n\t\t\tconst transceiver = this.connection.addTransceiver(kind, init);\n\t\t\tthis.emit(\"transceiver\", transceiver);\n\t\t\treturn transceiver;\n\t\t}\n\t\tthis.internalSignal({\n\t\t\ttype: \"transceiverRequest\",\n\t\t\ttransceiverRequest: {\n\t\t\t\tkind,\n\t\t\t\tinit,\n\t\t\t},\n\t\t});\n\t\treturn null;\n\t}\n\n\taddTrack(track: MediaStreamTrack) {\n\t\tif (!this.connection) {\n\t\t\tthrow new Error(\"Connection not initialized\");\n\t\t}\n\t\tconst sender = this.connection.addTrack(track);\n\t\treturn sender;\n\t}\n\n\tremoveTrack(sender: RTCRtpSender) {\n\t\tif (!this.connection) {\n\t\t\tthrow new Error(\"Connection not initialized\");\n\t\t}\n\t\tthis.connection.removeTrack(sender);\n\t\treturn this;\n\t}\n\n\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\tprivate internalSignal(message: any) {\n\t\tthis.emit(\"signal\", message);\n\t\treturn this;\n\t}\n\n\tpublic async negotiate() {\n\t\tif (this.initiator) {\n\t\t\tawait this.createOffer();\n\t\t} else {\n\t\t\tthis.internalSignal({ type: \"renegotiate\", renegotiate: true });\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate async createOffer() {\n\t\tif (!this.connection) {\n\t\t\tthrow new Error(\"Connection not initialized\");\n\t\t}\n\n\t\tconst offer = await this.connection.createOffer(this.offerConfig);\n\t\toffer.sdp = this.sdpTransform(offer.sdp);\n\t\tawait this.connection.setLocalDescription(offer);\n\t\tthis.internalSignal({ type: offer.type, sdp: offer.sdp });\n\t\treturn this;\n\t}\n\n\tprivate async createAnswer() {\n\t\tif (!this.connection) {\n\t\t\tthrow new Error(\"Connection not initialized\");\n\t\t}\n\n\t\tconst answer = await this.connection.createAnswer(this.answerConfig);\n\t\tanswer.sdp = this.sdpTransform(answer.sdp);\n\t\tawait this.connection.setLocalDescription(answer);\n\t\tthis.internalSignal({ type: answer.type, sdp: answer.sdp });\n\t\treturn this;\n\t}\n\n\tprivate createPeer() {\n\t\tthis.internalClose(false);\n\n\t\tthis.connection = new this.webrtc.RTCPeerConnection(this.config);\n\t\tthis.connection.addEventListener(\n\t\t\t\"negotiationneeded\",\n\t\t\tthis.onNegotiationNeeded.bind(this),\n\t\t);\n\t\tthis.connection.addEventListener(\n\t\t\t\"iceconnectionstatechange\",\n\t\t\tthis.onICEConnectionStateChange.bind(this),\n\t\t);\n\t\tthis.connection.addEventListener(\n\t\t\t\"icegatheringstatechange\",\n\t\t\tthis.onICEGatheringStateChange.bind(this),\n\t\t);\n\t\tthis.connection.addEventListener(\n\t\t\t\"connectionstatechange\",\n\t\t\tthis.onConnectionStateChange.bind(this),\n\t\t);\n\t\tthis.connection.addEventListener(\n\t\t\t\"icecandidate\",\n\t\t\tthis.onICECandidate.bind(this),\n\t\t);\n\t\tthis.connection.addEventListener(\n\t\t\t\"signalingstatechange\",\n\t\t\tthis.onSignalingStateChange.bind(this),\n\t\t);\n\t\tthis.connection.addEventListener(\"track\", this.onTrackRemote.bind(this));\n\n\t\tif (this.initiator) {\n\t\t\tconst channel = this.connection.createDataChannel(\n\t\t\t\tthis.channelName,\n\t\t\t\tthis.channelConfig,\n\t\t\t);\n\t\t\tchannel.addEventListener(\"open\", this.onDataChannelOpen.bind(this));\n\t\t\tchannel.addEventListener(\"message\", this.onDataChannelMessage.bind(this));\n\t\t\tchannel.addEventListener(\"error\", this.onDataChannelError.bind(this));\n\t\t\tthis.channel = channel;\n\t\t} else {\n\t\t\tthis.connection.addEventListener(\n\t\t\t\t\"datachannel\",\n\t\t\t\tthis.onDataChannel.bind(this),\n\t\t\t);\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate internalClose(triggerCallbacks = true) {\n\t\tif (this.channel) {\n\t\t\tthis.channel.close();\n\t\t\tthis.channel = undefined;\n\t\t}\n\n\t\tif (this.connection) {\n\t\t\tthis.connection.close();\n\t\t\tthis.connection = undefined;\n\t\t}\n\n\t\tif (triggerCallbacks) {\n\t\t\tthis.emit(\"close\");\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate onConnectionStateChange() {\n\t\tif (!this.connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.debug(\n\t\t\t`${this.id}: connection state ${this.connection.connectionState}`,\n\t\t);\n\t\tswitch (this.connection.connectionState) {\n\t\t\tcase \"failed\":\n\t\t\tcase \"disconnected\":\n\t\t\tcase \"closed\":\n\t\t\t\tthis.internalClose(true);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate onNegotiationNeeded() {\n\t\tif (!this.connection) {\n\t\t\treturn;\n\t\t}\n\t\treturn this.negotiate();\n\t}\n\n\tprivate onICEConnectionStateChange() {\n\t\tif (!this.connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.debug(\n\t\t\t`${this.id}: ice connection state ${this.connection.iceConnectionState}`,\n\t\t);\n\t}\n\n\tprivate onICEGatheringStateChange() {\n\t\tif (!this.connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.debug(\n\t\t\t`${this.id}: ice gathering state ${this.connection.iceGatheringState}`,\n\t\t);\n\t}\n\n\tprivate onSignalingStateChange() {\n\t\tif (!this.connection) {\n\t\t\treturn;\n\t\t}\n\t\tconsole.debug(\n\t\t\t`${this.id}: signaling state ${this.connection.signalingState}`,\n\t\t);\n\t}\n\n\tprivate onICECandidate(event: RTCPeerConnectionIceEvent) {\n\t\tif (event.candidate) {\n\t\t\tthis.internalSignal({\n\t\t\t\ttype: \"candidate\",\n\t\t\t\tcandidate: event.candidate,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onTrackRemote(event: RTCTrackEvent) {\n\t\tthis.emit(\"track\", event);\n\t}\n\n\tprivate onDataChannel(event: RTCDataChannelEvent) {\n\t\tconst channel = event.channel;\n\t\tthis.channel = channel;\n\t\tthis.channel.onopen = this.onDataChannelOpen.bind(this);\n\t\tthis.channel.onmessage = this.onDataChannelMessage.bind(this);\n\t\tthis.channel.onerror = this.onDataChannelError.bind(this);\n\t}\n\n\tprivate onDataChannelOpen() {\n\t\tconsole.debug(`${this.id}: data channel open`);\n\t\tthis.emit(\"connect\");\n\t}\n\n\tprivate onDataChannelMessage(\n\t\tevent: MessageEvent<string | Blob | ArrayBuffer | Uint8Array>,\n\t) {\n\t\tthis.emit(\"data\", event.data);\n\t}\n\n\tprivate onDataChannelError(event: Event) {\n\t\tthis.emit(\"error\", new Error(\"DataChannel error\", { cause: event }));\n\t}\n}\n\nfunction sdpTransform(sdp?: string) {\n\treturn sdp;\n}\nfunction asap() {\n\treturn new Promise<void>((resolve) => resolve());\n}\nfunction waitMS(ms: number) {\n\treturn new Promise<void>((resolve) => setTimeout(resolve, ms));\n}\n\nfunction write(\n\tchannel: RTCDataChannel,\n\tchunk: string | Blob | ArrayBuffer | ArrayBufferView,\n\tmaxChannelMessageSize: number,\n) {\n\tif (typeof chunk === \"string\") {\n\t\tif (chunk.length < maxChannelMessageSize) {\n\t\t\tchannel.send(chunk);\n\t\t} else {\n\t\t\tlet offset = 0;\n\t\t\twhile (offset < chunk.length) {\n\t\t\t\tconst length = Math.min(maxChannelMessageSize, chunk.length - offset);\n\t\t\t\tchannel.send(chunk.substring(offset, offset + length));\n\t\t\t\toffset += length;\n\t\t\t}\n\t\t}\n\t} else if (chunk instanceof Blob) {\n\t\tif (chunk.size < maxChannelMessageSize) {\n\t\t\tchannel.send(chunk);\n\t\t} else {\n\t\t\tlet offset = 0;\n\t\t\twhile (offset < chunk.size) {\n\t\t\t\tconst length = Math.min(maxChannelMessageSize, chunk.size - offset);\n\t\t\t\tchannel.send(chunk.slice(offset, offset + length));\n\t\t\t\toffset += length;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlet buffer: ArrayBuffer;\n\t\tif (chunk instanceof ArrayBuffer) {\n\t\t\tbuffer = chunk;\n\t\t} else {\n\t\t\tbuffer = chunk.buffer as ArrayBuffer;\n\t\t}\n\t\tif (buffer.byteLength < maxChannelMessageSize) {\n\t\t\tchannel.send(buffer);\n\t\t} else {\n\t\t\tlet offset = 0;\n\t\t\twhile (offset < buffer.byteLength) {\n\t\t\t\tconst length = Math.min(\n\t\t\t\t\tmaxChannelMessageSize,\n\t\t\t\t\tbuffer.byteLength - offset,\n\t\t\t\t);\n\t\t\t\tchannel.send(buffer.slice(offset, offset + length));\n\t\t\t\toffset += length;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function writableStreamFromChannel(\n\tchannel: RTCDataChannel,\n\tmaxChannelMessageSize: number,\n) {\n\treturn new WritableStream({\n\t\twrite(chunk: string | Blob | ArrayBuffer | ArrayBufferView) {\n\t\t\twrite(channel, chunk, maxChannelMessageSize);\n\t\t},\n\t});\n}\n\nexport function readableStreamFromChannel(channel: RTCDataChannel) {\n\tlet closed = false;\n\tlet closedController = false;\n\tconst queue: Array<string | Blob | ArrayBuffer> = [];\n\tconst pullQueue: Array<\n\t\t[\n\t\t\tresolve: (data: string | Blob | ArrayBuffer) => void,\n\t\t\treject: (error?: Error) => void,\n\t\t]\n\t> = [];\n\tfunction pull() {\n\t\treturn new Promise<string | Blob | ArrayBuffer>((resolve, reject) =>\n\t\t\tpullQueue.push([resolve, reject]),\n\t\t);\n\t}\n\tfunction onMessage(event: MessageEvent<string | Blob | ArrayBuffer>) {\n\t\tif (pullQueue.length) {\n\t\t\t// biome-ignore lint/style/noNonNullAssertion: checked above\n\t\t\tconst [resolve, _reject] = pullQueue.shift()!;\n\t\t\tresolve(event.data);\n\t\t} else {\n\t\t\tqueue.push(event.data);\n\t\t}\n\t}\n\tchannel.addEventListener(\"message\", onMessage);\n\tconst onClose = () => {\n\t\tif (closed) {\n\t\t\treturn;\n\t\t}\n\t\tchannel.removeEventListener(\"message\", onMessage);\n\t\tchannel.removeEventListener(\"close\", onClose);\n\t\tclosed = true;\n\t\tfor (const [_resolve, reject] of pullQueue) {\n\t\t\treject(new Error(\"Stream closed\"));\n\t\t}\n\t\tpullQueue.length = 0;\n\t\tqueue.length = 0;\n\t};\n\tchannel.addEventListener(\"close\", onClose);\n\treturn new ReadableStream<string | Blob | ArrayBuffer>({\n\t\tasync pull(controller) {\n\t\t\tif (closed) {\n\t\t\t\tif (!closedController) {\n\t\t\t\t\tclosedController = true;\n\t\t\t\t\tcontroller.close();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (queue.length) {\n\t\t\t\tcontroller.enqueue(queue.shift());\n\t\t\t} else {\n\t\t\t\tcontroller.enqueue(await pull());\n\t\t\t}\n\t\t},\n\t\tcancel: onClose,\n\t});\n}\n"],"names":["DEFAULT_WEBRTC","RTCPeerConnection","RTCSessionDescription","RTCIceCandidate","Peer","EventEmitter","constructor","options","super","this","initiator","maxChannelMessageSize","sdpTransform","config","iceServers","pendingCandidates","webrtc","id","uuidv4","channelName","channelConfig","offerConfig","answerConfig","getId","getConnection","connection","getChannel","channel","isReady","readyState","isClosed","connectionState","ready","Promise","resolve","waitOnce","data","closed","isInitiator","init","createPeer","close","internalClose","send","chunk","Error","write","writableStream","writableStreamFromChannel","readableStream","readableStreamFromChannel","signal","message","console","debug","type","negotiate","transceiverRequest","addTransceiverFromKind","kind","candidateJSON","candidate","remoteDescription","push","addIceCandidate","sdp","sessionDescription","setRemoteDescription","length","_b","_a","createAnswer","emit","event","once","args","undefined","transceiver","addTransceiver","internalSignal","addTrack","track","removeTrack","sender","createOffer","renegotiate","offer","setLocalDescription","answer","addEventListener","onNegotiationNeeded","bind","onICEConnectionStateChange","onICEGatheringStateChange","onConnectionStateChange","onICECandidate","onSignalingStateChange","onTrackRemote","createDataChannel","onDataChannelOpen","onDataChannelMessage","onDataChannelError","onDataChannel","triggerCallbacks","iceConnectionState","iceGatheringState","signalingState","onopen","onmessage","onerror","cause","offset","Math","min","substring","Blob","size","slice","buffer","ArrayBuffer","byteLength","WritableStream","closedController","queue","pullQueue","onMessage","_reject","shift","onClose","removeEventListener","_resolve","reject","ReadableStream","pull","controller","enqueue","cancel"],"mappings":"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"}